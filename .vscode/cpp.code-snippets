{
	"main":{
		"prefix":"main",
		"body":[
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"int main(){",
			"\t$1",
			"\treturn 0;",
			"}"
		],
		"description":"main関数"
	},
	"popcount":{
		"prefix":"popcount",
		"body":[
			"__builtin_popcount(${1:value})"
		],
		"description": "popcount"
	},
	"popcountll":{
		"prefix":"popcountll",
		"body":[
			"__builtin_popcountll(${1:value})"
		],
		"description": "popcountll"
	},
	"Doubling":{
		"prefix":"doubling",
		"body":[
			"#include <bitset>",
			"//穴iにいた2^0日後の場所:dp[0][i]",
			"//穴iにいた2^1日後の場所:dp[1][i]",
			"//穴iにいた2^2日後の場所:dp[2][i]",
			"//穴iにいた2^3日後の場所:dp[3][i]",
			"std::vector dp(${1:60},std::vector<int>(n+1));",
			"//初期値の代入",
			"for(int i=1;i<=n;i++){",
			"\tdp[0][i]=${3:a}[i]; //穴iの1日後の場所",
			"}",
			"//前計算",
			"//1日後の1日後は2日後",
			"//dp[1][i]=dp[0][dp[0][i]]",
			"//2日後の2日後は4日後",
			"//dp[2][i]=dp[1][dp[1][i]]",
			"//4日後の4日後は8日後",
			"//dp[3][i]=dp[2][dp[2][i]]",
			"for(int i=1;i<=${2:59};i++){",
			"\tfor(int j=1;j<=n;j++){",
			"\t\tdp[i][j]=dp[i-1][dp[i-1][j]];",
			"\t}",
			"}",
			"//場所xにいる時、y日後にいる場所を求める",
			"//例:穴2にいた13日後の場所",
			"//13=2^3+2^2+2^0",
			"//穴2にいた8日後の場所はdp[3][2]=3",
			"//穴3にいた4日後の場所はdp[2][3]=7",
			"//穴7にいた1日後の場所はdp[0][7]=3",
			"auto calc=[&](int x,${4:long long} y){",
			"\tint ret=x;",
			"\tstd::bitset<${1:60}> bitset(y);",
			"\tfor(int i=${2:59};i>=0;i--){",
			"\t\tif(bitset[i]){",
			"\t\t\tret=dp[i][ret];",
			"\t\t}",
			"\t}",
			"\treturn ret;",
			"};",
		],
		"description": "Doubling"
	},
	"StringHash":{
		"prefix":"stringhash",
		"body":[
			"#include <atcoder/modint>",
			"using mint=atcoder::modint998244353;",
			"class StringHash{",
			"private:",
			"\tstd::string s;",
			"\t//基数100でハッシュ値計算しているのでオーバーフロー対策でmintを使う",
			"\tstd::vector<mint> t,H,B;",
			"\tvoid init(){",
			"\t\t//文字列sを数列tに変換",
			"\t\tint n=s.size();",
			"\t\tt.resize(n+1);",
			"\t\tfor(int i=0;i<n;i++){",
			"\t\t\tt[i]=s[i]-'a'+1;",
			"\t\t}",
			"\t\t//ハッシュ値の前計算のコンポーネント",
			"\t\tH.resize(n+1);",
			"\t\tfor(int i=1;i<=n;i++){",
			"\t\t\tH[i]=100*H[i-1]+t[i-1];",
			"\t\t}",
			"\t\t//ハッシュ値の前計算のコンポーネント2",
			"\t\tB.resize(n+1);",
			"\t\tB[0]=1;",
			"\t\tfor(int i=1;i<=n;i++){",
			"\t\t\tB[i]=B[i-1]*100;",
			"\t\t}",
			"\t}",
			"public:",
			"\tStringHash(std::string str):s(str){",
			"\t\tinit();",
			"\t}",
			"\t//s[l,r]のハッシュ値の計算",
			"\tmint hash(int l,int r){",
			"\t\treturn H[r]-B[r-l+1]*H[l-1];",
			"\t}",
			"};",
		],
		"description": "StringHash"
	},
	"lamdaceili":{
		"prefix":"lamdaceili",
		"body":[
			"auto ceili=[&](int a,int b){",
			"\treturn (a+(b-1))/b;",
			"};",
		],
		"description": "lamdaceili"
	},
	"lamdaceilll":{
		"prefix":"lamdaceilll",
		"body":[
			"auto ceilll=[&](long long a,long long b){",
			"\treturn (a+(b-1))/b;",
			"};",
		],
		"description": "lamdaceilll"
	},
	"treediameter":{
		"prefix":"treediameter",
		"body":[
			"auto f=[&](int start){",
			"\tlong long max=0;",
			"\tint ret;",
			"\tauto dfs=[&](auto dfs,int p,int u,long long cost)->void{",
			"\t\tif(g[u].size()==1&&u!=start){ //開始頂点でない&&次数1の頂点ならコストを更新",
			"\t\t\tif(max<cost){",
			"\t\t\t\tmax=cost;",
			"\t\t\t\tret=u;",
			"\t\t\t}",
			"\t\t}",
			"\t\tfor(auto [v,c]:g[u]){",
			"\t\t\tif(v==p){ //訪れた頂点なら遷移しない",
			"\t\t\t\tcontinue;",
			"\t\t\t}",
			"\t\t\tdfs(dfs,u,v,cost+c);",
			"\t\t}",
			"\t};",
			"\tdfs(dfs,-1,start,0);",
			"\treturn ret;",
			"};",
			"int ${1:node1}=f(0); //直径の頂点1",
			"int ${2:node2}=f(${1:node1}); //直径の頂点2",
		],
		"description": "木の直径を求めよう！"
	},
	"treeDiameterAndCalcCost":{
		"prefix":"treeDiameterAndCalcCost",
		"body":[
			"// !gはコスト付き木であるとする",
			"const long long INF=1e18;",
			"auto dijkstra=[&](int start){",
			"\tstd::vector<long long> cur(n+1,-INF);//暫定距離を記録",
			"\tstd::vector<bool> confirmed(n+1);//最短距離が確定した頂点",
			"\tstd::priority_queue<pair<long long,int>> pque;",
			"\tpque.push({0,start});",
			"\tcur[start]=0;",
			"\twhile(!pque.empty()){",
			"\t\tauto [_,u]=pque.top();",
			"\t\tpque.pop();",
			"\t\tif(confirmed[u]){// !確定済み頂点である間、キューの最小値を削除し続ける",
			"\t\t\tcontinue;// !これを入れないとO(M^2)になってしまうケースがありそう。",
			"\t\t\t// !実際に実験すると、下の*での確認だけでは、同じ頂点に対して複数の{コスト,頂点}の要素が入りうると分かる。",
			"\t\t\t// !これを入れないと同じ頂点に対してN回ループ処理することになり、ボトルネックになりうる。",
			"\t\t\t// !実験メモ",
			"\t\t\t// !完全グラフに対して、キューへのpushの時にコストが全部同じになるようにしてシミュレーション。",
			"\t\t\t// !キューの要素は合計で2M個になった。",
			"\t\t\t// !これらの要素全てについてN回調べると、2M+(2M-N)N回の計算をするため、O(NM)となる。",
			"\t\t\t// !この!での確認を行えば2M+log(MlogM)でconfirmを全て確定できる。",
			"\t\t\t// !よって全体でO(MlogM)になりそう。",
			"\t\t}",
			"\t\tconfirmed[u]=true;",
			"\t\tfor(auto [c,v]:g[u]){",
			"\t\t\tif(!confirmed[v]){//隣接している未確定頂点についてcurを更新",
			"\t\t\t\t// *正直こっちの確認は計算量削減にはあまり寄与しない",
			"\t\t\t\t//各頂点の次数の総和は2Mなので、2M回しかキューには入らなく、!で示した部分があればそれぞれO(1)しか影響しない。",
			"\t\t\t\tcur[v]=std::max(cur[v],c+cur[u]);//!暫定距離を更新していく",
			"\t\t\t\t//!暫定距離の更新は現在の値とのchminを取りつつ更新することに注意",
			"\t\t\t\t//!push時にcur更新、pop時にconfirm確定、という気持ちでよさそう",
			"\t\t\t\t//!curは更新されるとは限らないことに注意",
			"\t\t\t\tpque.push({cur[v],v});//ヒープキューに暫定距離を入れつつ",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\treturn cur;",
			"};",
			"int s,t; //s,tは直径の両端のノード。",
			"std::vector<long long> ds=dijkstra(1); //適当な頂点からダイクストラをして、そこからの最大コストを持つ頂点sを決める。",
			"// *木のある頂点からの最大距離を持つ頂点は、直径のノードのどちらかになるので、sは直径のノードの片方となる",
			"long long cost=-1; //costが最大のノードを探すので、costは取り得ない数にしておく。",
			"for(int i=1;i<=n;i++){",
			"\tif(i==1){ //自分自身は遷移として考えない(問題によって頂点倍加でコストを追加すると、これがないと自分に遷移する可能性がある)",
			"\t\tcontinue;",
			"\t}",
			"\tif(cost<ds[i]){ //ds[i]は1からiへの到達コスト",
			"\t\t//ds[i]がcostよりも大きいなら、最大のcostと暫定頂点sを更新する。",
			"\t\tcost=ds[i];",
			"\t\ts=i;",
			"\t}",
			"}",
			"std::vector<long long> dt=dijkstra(s); //直径のノードの片方であるsからダイクストラをして、もう片方の直径のノードtを求める",
			"// 最大距離を持つノードがtとなる。",
			"cost=-1; //costの初期化",
			"for(int i=1;i<=n;i++){",
			"\tif(i==s){ //1からダイクストラをした時と同様に、自分自身を遷移に含まないようにする。",
			"\t\tcontinue;",
			"\t}",
			"\tif(cost<dt[i]){ //1からダイクストラをした時と同様に、costと暫定頂点tを更新していく。",
			"\t\tcost=dt[i];",
			"\t\tt=i;",
			"\t}",
			"}",
			"// 直径のノードs,tからダイクストラをする。",
			"// 直径の性質より、cur1[u]またはcur2[u]がuに対して最大コストを持つ頂点へのコストとなる。",
			"std::vector<long long> cur1=dijkstra(s);",
			"std::vector<long long> cur2=dijkstra(t);",
			"for(int i=1;i<=n;i++){ //各頂点iについて最大コストを持つ頂点へのコストを調べる。",
			"\tlong long ans=-1; //最大値を調べるので、ansは-1としておく。",
			"\tif(i!=s){ //iからsへのコストを調べる時、iがsである時は考えない(頂点倍加などでコストに何か追加される場合、かつ自分への遷移は認めない時、これがないと自身へ遷移しうる)",
			"\t\tans=std::max(ans,cur1[i]);",
			"\t}",
			"\tif(i!=t){ //iからtへのコストを調べる時、sの時と同様に、iがtの時は考えない。",
			"\t\tans=std::max(ans,cur2[i]);",
			"\t\t",
			"\t}",
			"\tstd::cout<<ans<<'\n'; //iに対して最大コストを持つ頂点(s,tのいずれか)へのコストを出力",
			"}",
		],
		"description": "コスト付き木の直径をダイクストラを用いて求める+直径の性質を用いて各頂点が持つ最大コストを持つ頂点に対するコストを計算する"
	},
	"bitset":{
		"prefix":"bitset",
		"body":[
			"std::bitset<${1:size}> ${2:bitset}(${3:bit});",
			"//リファレンス:https://cpprefjp.github.io/reference/bitset/bitset.html",
			"//雑メモ:std::coutで2進法表記で出力",
			"//整数から10ビットのビット集合を構築",
			"//bitset<10> bs(5)",
			"//論理和、論理積、排他的論理和もサポートしている",
			"//他にも[]で任意のビットにアクセス、countで1になっているビットの数を取得など",
			"//様々なメソッド、アクセッサー?、演算子などが定義されている",
			"//#include <bitset>",
			"//! 注意:sizeは定数でしか指定できない",
			"//! 注意:bitset.count()は返り値の型がstd::size_t(?)なのでintにキャストして使用しないとエラーになる",
		],
		"description": "bitset"
	},
	"rsw2":{
		"prefix":"rsw2",
		"body":[
			"std::vector<std::vector<${1:int}>> rsw(${2:h}+1,std::vector<${1:int}>(${3:w}+1));$5",
			"//列方向への累積和",
			"for(int i=0;i<=${2:h};i++){",
			"\tfor(int j=1;j<=${3:w};j++){",
			"\t\trsw[i][j]+=${4:x}[i][j]+rsw[i][j-1];",
			"\t}",
			"}",
			"//行方向への累積和",
			"for(int j=0;j<=${3:w};j++){",
			"\tfor(int i=1;i<=${1:h};i++){",
			"\t\trsw[i][j]+=rsw[i-1][j];",
			"\t}",
			"}",
		],
		"description": "rsw2"
	},
	"calcrsw2":{
		"prefix":"calcrsw2",
		"body":[
			"rsw[${1:migisitaX}][${2:migisitaY}]+rsw[${3:hidariueX}-1][${4:hidariueY}-1]-rsw[${3:hidariueX}-1][${2:migisitaY}]-rsw[${1:migisitaX}][${4:hidariueY}-1]",
		],
		"description": "calcrsw2"
	},
	"imos2":{
		"prefix":"imos2",
		"body":[
			"std::vector<std::vector<int>> imos(${1:h}+2,std::vector<int>(${2:w}+2));",
			"for(int i=0;i<${3:n};i++){",
			"\tint ${4:hidariueX},${5:hidariueY},${6:migisitaX},${7:migisitaY};",
			"\tstd::cin>>${4:hidariueX}>>${5:hidariueY}>>${6:migisitaX}>>${7:migisitaY};",
			"\timos[${4:hidariueX}][${5:hidariueY}]++;",
			"\timos[${4:hidariueX}][${7:migisitaY}+1]--;",
			"\timos[${6:migisitaX}+1][${5:hidariueY}]--;",
			"\timos[${6:migisitaX}+1][${7:migisitaY}+1]++;",
			"}",
			"//列方向に累積和",
			"for(int i=0;i<=${1:h};i++){",
			"\tfor(int j=1;j<=${2:w};j++){",
			"\t\timos[i][j]+=imos[i][j-1];",
			"\t}",
			"}",
			"//行方向に累積和",
			"for(int j=0;j<=${2:w};j++){",
			"\tfor(int i=1;i<=${1:h};i++){",
			"\t\timos[i][j]+=imos[i-1][j];",
			"\t}",
			"}",
			"for(int i=1;i<=${1:h};i++){",
			"\tfor(int j=1;j<=${2:w};j++){",
			"\t\tstd::cout<<imos[i][j]<<((j!=${2:w})?' ':'\\n');",
			"\t}",
			"}",
		],
		"description": "imos2"
	},
	"powll":{
		"prefix":"powll",
		"body":[
			"auto powll=[&](long long a,int b){",
			"\tlong long ret=1;",
			"\tfor(int i=0;i<b;i++){",
			"\t\tret*=a;",
			"\t}",
			"\treturn ret;",
			"};",
		],
		"description": "powll"
	},
	"accumulate":{
		"prefix":"accumulate",
		"body":[
			"std::accumulate(${1:vec}.begin(),${1:vec}.end(),${2:0LL});//intなら0,long longなら0LLにすることに注意",
			"// #include <numeric>",
		],
		"description": "accumulate"
	},
	"powi":{
		"prefix":"powi",
		"body":[
			"auto powi=[&](int a,int b){",
			"\tint ret=1;",
			"\tfor(int i=0;i<b;i++){",
			"\t\tret*=a;",
			"\t}",
			"\treturn ret;",
			"};",
		],
		"description": "powi"
	},
	"lessthan":{
		"prefix":"lessthan",
		"body":[
			"auto less_than=[&](std::vector<${1:int}> vec,${1:int} val){ //val未満のvecの要素数",
			"\tint ret=std::lower_bound(vec.begin(),vec.end(),val)-vec.begin();",
			"\treturn ret;",
			"};",
		],
		"description": "lessthan"
	},
	"greaterthan":{
		"prefix":"greaterthan",
		"body":[
			"auto greater_than=[&](std::vector<${1:int}> vec,${1:int} val){ //valより大きいvecの要素数",
			"\tint ret=std::upper_bound(vec.begin(),vec.end(),val)-vec.begin();",
			"\treturn (int)vec.size()-ret;",
			"};",
		],
		"description": "greaterthan"
	},
	"orless":{
		"prefix":"orless",
		"body":[
			"auto orless=[&](std::vector<${1:int}> vec,${1:int} val){ //val以下のvecの要素数",
			"\tint ret=std::upper_bound(vec.begin(),vec.end(),val)-vec.begin();",
			"\treturn ret;",
			"};",
		],
		"description": "orless"
	},
	"ormore":{
		"prefix":"ormore",
		"body":[
			"auto ormore=[&](std::vector<${1:int}> vec,${1:int} val){ //val以上のvecの要素数",
			"\tint ret=std::lower_bound(vec.begin(),vec.end(),val)-vec.begin();",
			"\treturn (int)vec.size()-ret;",
			"};",
		],
		"description": "ormore"
	},
	"modint":{
		"prefix":"modint",
		"body":[
			"// #include <atcoder/modint>",
			"// 名前空間のatcoder::を忘れないように注意",
			"// atcoder::modint x;のように変数を設定可能",
			"// x.pow(n);でx^nを計算(O(logN))",
			"// x.inv():でxの逆元を計算(xとmodが互いに素である必要があることに注意)",
			"// x.val();でxの値を返す",
			"// atcoder::modint::set_mod(MOD);でmodをMODに設定",
			"// https://atcoder.github.io/ac-library/production/document_ja/modint.html",
			"const long long MOD=${1:998244353};",
			"atcoder::modint::set_mod(MOD);",
		],
		"description": "modint"
	},
	"sumoftohisuretumodint":{
		"prefix":"sumoftohisuretumodint",
		"body":[
			"auto sum_of_tohisuretu_modint=[&](atcoder::modint syoko,atcoder::modint kohi,long long kosu){",
			"\tatcoder::modint bunshi= syoko*((atcoder::modint)1-kohi.pow(kosu));",
			"\tatcoder::modint temp_bunbo=(atcoder::modint)1-kohi;",
			"\tatcoder::modint bunbo=temp_bunbo.inv();",
			"\treturn bunshi*bunbo;",
			"};",
		],
		"description": "sumoftohisuretumodint"
	},
	"sumoftohisuretu":{
		"prefix":"sumoftohisuretu",
		"body":[
			"auto sum_of_tohisuretu=[&](long long syoko,long long kohi,long long kosu){",
			"\tauto powll=[&](long long a,int b){",
			"\t\tlong long ret=1;",
			"\t\tfor(int i=0;i<b;i++){",
			"\t\t\tret*=a;",
			"\t\t}",
			"\t\treturn ret;",
			"\t};",
			"\tlong long bunshi= syoko*(1-powll(kohi,kosu));",
			"\tlong long bunbo=1-kohi;",
			"\treturn bunshi/bunbo;",
			"};",
		],
		"description": "sumoftohisuretu"
	},
	"sumoftosasuretu":{
		"prefix":"sumoftosasuretu",
		"body":[
			"auto sum_of_tosasuretu=[&](long long syoko,long long kosa,long long kosu){",
			"\treturn (kosu*(2*syoko+(kosu-1)*kosa))/2;",
			"};",
		],
		"description": "sumoftosasuretu"
	},
	"sumoftosasuretuwithmako":{
		"prefix":"sumoftosasuretuwithmako",
		"body":[
			"auto sum_of_tosasuretu=[&](long long syoko,long long makko,long long kosu){",
			"\treturn (kosu*(syoko+makko))/2;",
			"};",
		],
		"description": "sumoftosasuretuwithmako"
	},
	"sumofbitunderM":{
		"prefix":"sumofbitunderM",
		"body":[
			"auto sum_of_bit_under_M=[&](long long M){ //x<=Mのxの各ビットの総和を考える",
			"\tstd::vector<long long> ret(61); //60ビット分のビットの1の和を考える",
			"\tfor(int k=0;k<=60;k++){",
			"\t\tlong long cnt=0;",
			"\t\tlong long box_cnt=ceilll((M+1),powll(2,k+1));",
			"\t\tcnt+=(box_cnt-1)*powll(2,k); //確定で存在",
			"\t\tlong long rem=M+1-((box_cnt-1)*powll(2,k+1));",
			"\t\tcnt+=std::max(0LL,rem-powll(2,k));",
			"\t\tret[k]=cnt;",
			"\t}",
			"\treturn ret;",
			"};",
		],
		"description": "sumofbitunderM"
	},
	"kurasukaruhou":{
		"prefix":"kurasukaruhou",
		"body":[
			"//辺はstd::vector<std::pair<long long,std::pair<int,int>>> edge;みたいな感じで",
			"//必要に応じて辺情報は圧縮しましょう",
			"std::sort(edge.begin(),edge.end()); //コストが小さい順にソート",
			"// #include <atcoder/dsu>",
			"atcoder::dsu uf(n); //n頂点の作成",
			"long long ans=0;",
			"int merge_cnt=0;",
			"for(int i=0;i<edge.size();i++){ //辺のコストが小さい方から",
			"\tauto [cost,uv]=edge[i];",
			"\tint u=uv.first;",
			"\tint v=uv.second;",
			"\tif(uf.leader(u)==uf.leader(v)){ //閉路を生成してしまう場合は無視",
			"\t\tcontinue;",
			"\t}",
			"\tuf.merge(u,v);",
			"\tmerge_cnt++;",
			"\tans+=cost;",
			"}",
			"if(merge_cnt!=n-1){ //連結した変数がn-1でないならば全域木は出来ていない",
			"\tstd::cout<<-1<<'\n';",
			"}else{",
			"\tstd::cout<<ans<<'\n';",
			"}",
		],
		"description": "kurasukaruhou"
	},
	"lamdancm":{
		"prefix":"lamdancm",
		"body":[
			"std::map<std::pair<${1:int},${1:int}>,${2:long long}> nCm_map; //メモ化用",
			"auto nCm=[&](auto nCm,${1:int} n,${1:int} m)->${2:long long}{ //オーバーフローを防ぐためパスカルの三角形?を用いる",
			"\tif(nCm_map.count({n,m})){",
			"\t\treturn nCm_map[{n,m}];",
			"\t}",
			"\tif(n==m||m==0){",
			"\t\treturn nCm_map[{n,m}]=1;",
			"\t}else if(n<m){",
			"\t\treturn nCm_map[{n,m}]=0;",
			"\t}else{",
			"\t\treturn nCm_map[{n,m}]=nCm(nCm,n-1,m)+nCm(nCm,n-1,m-1);",
			"\t}",
			"};",
		],
		"description": "lamdancm"
	},
}